const fs = require("fs-extra");
const path = require("path");
const axios = require("axios");
const jimp = require("jimp");

module.exports.config = {
  name: "love",
  version: "2.0.0",
  hasPermssion: 0,
  credits: "Joy Ahmed",
  description: "Make a romantic love frame with someone you mention",
  category: "Love",
  usages: "[tag]",
  cooldowns: 5,
  prefix: true
};

module.exports.onLoad = async () => {
  const cachePath = path.join(__dirname, "cache", "canvas");
  if (!fs.existsSync(cachePath)) fs.mkdirSync(cachePath, { recursive: true });

  const bgPath = path.join(cachePath, "joy.png");
  if (!fs.existsSync(bgPath)) {
    try {
      const imageURL = "https://drive.google.com/uc?id=1BhOoXAXx33YVsENF0heQRDtg17Z8YgNV";
      const res = await axios.get(imageURL, { responseType: "arraybuffer" });
      fs.writeFileSync(bgPath, Buffer.from(res.data));
    } catch (err) {
      console.error("Failed to download love template:", err);
    }
  }
};

async function circle(imgPath) {
  const image = await jimp.read(imgPath);
  image.circle();
  return image.getBufferAsync("image/png");
}

async function makeImage({ one, two }) {
  const cacheDir = path.join(__dirname, "cache", "canvas");
  const bg = await jimp.read(path.join(cacheDir, "joy.png"));

  const avt1Path = path.join(cacheDir, `avt_${one}.png`);
  const avt2Path = path.join(cacheDir, `avt_${two}.png`);
  const finalPath = path.join(cacheDir, `love_${one}_${two}.png`);

  const getAvt = async (uid, savePath) => {
    const url = `https://graph.facebook.com/${uid}/picture?width=512&height=512&access_token=6628568379|c1e620fa708a1d5696fb991c1bde5662`;
    const res = await axios.get(url, { responseType: "arraybuffer" });
    fs.writeFileSync(savePath, Buffer.from(res.data));
  };

  await getAvt(one, avt1Path);
  await getAvt(two, avt2Path);

  const circ1 = await jimp.read(await circle(avt1Path));
  const circ2 = await jimp.read(await circle(avt2Path));

  bg.composite(circ1.resize(196, 196), 98, 141);
  bg.composite(circ2.resize(193, 193), 427, 143);

  const buffer = await bg.getBufferAsync("image/png");
  fs.writeFileSync(finalPath, buffer);

  fs.unlinkSync(avt1Path);
  fs.unlinkSync(avt2Path);

  return finalPath;
}

module.exports.onStart = async function ({ api, event }) {
  const senderID = event.senderID;
  const mentions = event.mentions || {};
  const mentionIDs = Object.keys(mentions);

  if (!mentionIDs.length) {
    return api.sendMessage(
      "ü•∞ ‡¶Ø‡¶æ‡¶ï‡ßá ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßá ‡¶≤‡¶æ‡¶≠ ‡¶´‡ßç‡¶∞‡ßá‡¶Æ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶ì, ‡¶§‡¶æ‡¶ï‡ßá ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ï‡¶∞‡ßã!",
      event.threadID,
      event.messageID
    );
  }

  const taggedID = mentionIDs[0];
  try {
    const imgPath = await makeImage({ one: senderID, two: taggedID });

    const msgBox = `
‚ï≠‚ïº|‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ|‚ïæ‚ïØ
‚îÇ üíñ ùìõùì∏ùìøùìÆ ùìïùìªùì™ùì∂ùìÆ üíñ
‚îÇ 
‚îÇ ùìõùì∏ùìøùìÆ ùì≤ùìº ùì∑ùì∏ùìΩ ùì™ùì´ùì∏ùìæùìΩ ùìπùì∏ùìºùìºùìÆùìºùìºùì≤ùì∑ùì∞,
‚îÇ ùì≤ùìΩ'ùìº ùì™ùì´ùì∏ùìæùìΩ ùì™ùìπùìπùìªùìÆùì¨ùì≤ùì™ùìΩùì≤ùì∑ùì∞. üíû
‚îÇ 
‚îÇ üíå ‚Äúùêìùê® ùê•ùê®ùêØùêû ùêöùêßùêù ùêõùêû ùê•ùê®ùêØùêûùêù ùê¢ùê¨ ùê≠ùê°ùêû ùê†ùê´ùêûùêöùê≠ùêûùê¨ùê≠ ùêüùêûùêûùê•ùê¢ùêßùê†.‚Äù üíå
‚îÇ 
‚îÇ ‚ú® ùìíùìªùìÆùì™ùìΩùì∏ùìª: ùí•‚ùçùìé ùíúùíΩùìÇùëíùíπ ‚ú®
‚ï∞‚ïº|‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ|‚ïæ‚ïØ
`;

    return api.sendMessage(
      {
        body: msgBox,
        attachment: fs.createReadStream(imgPath)
      },
      event.threadID,
      () => fs.unlinkSync(imgPath),
      event.messageID
    );
  } catch (err) {
    console.error(err);
    return api.sendMessage(
      "‚ùå ‡¶õ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!",
      event.threadID,
      event.messageID
    );
  }
};