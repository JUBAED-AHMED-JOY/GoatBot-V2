const axios = require("axios");

// memory-based per-thread limit
const limits = {};
const lastUsage = {};
const GITHUB_URL =
  "https://raw.githubusercontent.com/JUBAED-AHMED-JOY/Joy/main/bom.json";

// Helper: split long message into 2000 char chunks
function chunkMessage(text, size = 2000) {
  const chunks = [];
  for (let i = 0; i < text.length; i += size) {
    chunks.push(text.slice(i, i + size));
  }
  return chunks;
}

module.exports = {
  config: {
    name: "gcsms",
    version: "7.0.0",
    author: "Joy",
    role: 2,
    shortDescription: "Send group messages from GitHub JSON (large message safe)",
    longDescription:
      "Send messages to any thread/group using threadID and limit, plus list and reset system, all in one command. Large messages auto-sliced.",
    category: "admin",
  },

  onStart: async function ({ api, event, args }) {
    if (!args[0]) {
      return api.sendMessage(
        `‚öôÔ∏è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:\n.gcsms <threadID> <limit>\n.gcsms list\n.gcsms reset <threadID>\nüìò Source: ${GITHUB_URL}`,
        event.threadID
      );
    }

    const action = args[0].toLowerCase();

    // ---- LIST ----
    if (action === "list") {
      if (!Object.keys(limits).length) {
        return api.sendMessage("‚ö†Ô∏è ‡¶è‡¶ñ‡¶®‡¶ì ‡¶ï‡ßã‡¶®‡ßã gcsms ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü‡¶®‡¶ø‡•§", event.threadID);
      }

      let msg = "üìä GCSMS Usage List:\n";
      for (const [tid, count] of Object.entries(limits)) {
        const time = lastUsage[tid] ? ` (‡¶∂‡ßá‡¶∑ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: ${new Date(lastUsage[tid]).toLocaleString()})` : "";
        msg += `\nüîπ ${tid}: ${count} ‡¶¨‡¶æ‡¶∞${time}`;
      }
      return api.sendMessage(msg, event.threadID);
    }

    // ---- RESET ----
    if (action === "reset") {
      if (!args[1]) return api.sendMessage("‚ö†Ô∏è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: .gcsms reset <threadID>", event.threadID);

      const threadID = args[1].trim();
      if (!limits[threadID])
        return api.sendMessage("‚ö†Ô∏è ‡¶è‡¶á ThreadID ‡¶è‡¶ñ‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶®‡¶ø‡•§", event.threadID);

      limits[threadID] = 0;
      lastUsage[threadID] = null;
      return api.sendMessage(`‚úÖ ${threadID} ‡¶è‡¶∞ gcsms limit ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`, event.threadID);
    }

    // ---- SEND MESSAGES ----
    const threadID = args[0].trim();
    const limit = parseInt(args[1]);
    if (isNaN(limit) || limit <= 0)
      return api.sendMessage("‚ö†Ô∏è ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï limit ‡¶¶‡¶ø‡¶® (‡¶Ø‡ßá‡¶Æ‡¶® 5 ‡¶¨‡¶æ 10)‡•§", event.threadID);

    if (!limits[threadID]) limits[threadID] = 0;
    if (limits[threadID] >= limit)
      return api.sendMessage(
        `üö´ Limit reached! ‡¶è‡¶á group/thread ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ${limit} ‡¶¨‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§`,
        event.threadID
      );

    try {
      const res = await axios.get(GITHUB_URL, { timeout: 20000 });
      const data = res.data;

      let messages = [];
      if (Array.isArray(data)) {
        messages = data;
      } else if (Array.isArray(data.messages)) {
        messages = data.messages;
      } else if (typeof data.message === "string") {
        messages = [data.message];
      } else {
        return api.sendMessage("‚ùå GitHub JSON ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü!", event.threadID);
      }

      if (!messages.length)
        return api.sendMessage("‚ö†Ô∏è GitHub ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ñ‡¶æ‡¶≤‡¶ø!", event.threadID);

      api.sendMessage(
        `üì© ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ${limit} ‡¶¨‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã...\nüéØ ThreadID: ${threadID}`,
        event.threadID
      );

      for (let i = 0; i < limit; i++) {
        const msg = messages[i % messages.length];
        const chunks = chunkMessage(msg, 2000); // slice if >2000 char

        for (const chunk of chunks) {
          await api.sendMessage(chunk, threadID);
          await new Promise((r) => setTimeout(r, 1500)); // 1.5 sec delay per chunk
        }
      }

      limits[threadID] += limit;
      lastUsage[threadID] = Date.now();

      return api.sendMessage(
        `‚úÖ ${limit} ‡¶¨‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\nüìò Source: GitHub\nüì© ThreadID: ${threadID}`,
        event.threadID
      );
    } catch (err) {
      console.error(err);
      const errMsg = err.response?.status
        ? `HTTP ${err.response.status}: ${err.response.statusText}`
        : err.code || err.message || "Unknown error";
      return api.sendMessage(
        `‚ùå GitHub ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\nError: ${errMsg}`,
        event.threadID
      );
    }
  },
};
